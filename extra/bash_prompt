# Impressiver’s projectrc prompt, modified from...
# @gf3’s Sexy Bash Prompt, inspired by “Extravagant Zsh Prompt”
# Shamelessly copied from https://github.com/gf3/dotfiles

# Also see: http://mywiki.wooledge.org/BashFAQ/037

# Test all available term colors
function taste-the-rainbow() {
  echo "`printf %$((${COLUMNS}/2-12))s`Using 'tput' `printf %$((${COLUMNS}/2-19))s`Using ASCII '\\e'"
  ( x1=`tput op` x2=$"\e[0m" y=`printf %$((${COLUMNS}/2-4))s`
    for i in {0..256}; do
      o=00$i;
      echo -e ${o:${#o}-3:3} `tput setaf $i; tput setab $i`${y// /=} $x1 $"\e[48;5;${i}m\e[38;5;${i}m"${y// /=} $x2
    done
  )
  echo
}

# Set the terminal compatibility
if [ ! "$TERM" ]; then
  if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
    export TERM=gnome-256color
  elif [[ $TERM != dumb ]] && infocmp xterm-256color >/dev/null 2>&1; then
    export TERM=xterm-256color
  fi
fi

# Set the palette
if tput setaf 1 &> /dev/null; then
  tput sgr0
  if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
    MAGENTA=$(tput setaf 9)
    ORANGE=$(tput setaf 172)
    GREEN=$(tput setaf 190)
    PURPLE=$(tput setaf 141)
    WHITE=$(tput setaf 0)
    RED=$(tput setaf 124)
    YELLOW=$(tput setaf 214)
  else
    MAGENTA=$(tput setaf 5)
    ORANGE=$(tput setaf 4)
    GREEN=$(tput setaf 2)
    PURPLE=$(tput setaf 1)
    WHITE=$(tput setaf 7)
    RED=$(tput setaf 1)
    YELLOW=$(tput setaf 3)
  fi
  BOLD=$(tput bold)
  RESET=$(tput sgr0)
else
  MAGENTA="\033[1;31m"
  ORANGE="\033[1;33m"
  GREEN="\033[1;32m"
  PURPLE="\033[1;35m"
  WHITE="\033[1;37m"
  RED="\033[1;31m"
  YELLOW="\033[1;33m"
  BOLD=""
  RESET="\033[m"
fi

# Print an icon if the current directory is a git repo and there are local changes
function parse_git_dirty() {
  # U+26A1 HIGH VOLTAGE SIGN (⚡)
  [[ -n $(git branch 2> /dev/null) ]] && [[ $(git status 2> /dev/null | tail -n1) != *"working directory clean"* ]] && echo " ⚡"
}

# Print the branch name if the current directory is a git repo
function parse_git_branch() {
  [[ -n $(git branch 2> /dev/null) ]] && git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/ \1/"
}

# Print repo name if the current directory is a git repo
function parse_project() {
  echo "${PROJECT:-$(basename "$(git rev-parse --show-toplevel 2> /dev/null)")}"
}

# Nerd up the bash prompt
export PS1="\[${BOLD}${MAGENTA}\]\u \[$WHITE\]at \[$ORANGE\]\h \[$WHITE\]in \[$ORANGE\]\w\[$WHITE\]\$([ \$(parse_project) ] && echo \" on \")\[$PURPLE\]\$(parse_project)\[$GREEN\]\$(parse_git_branch)\[$WHITE\]\$(parse_git_dirty)\n\$ \[$RESET\]"
export PS2="\[$ORANGE\]→ \[$RESET\]"
