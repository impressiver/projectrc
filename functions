#  Keeps a separate bash-history for each project
function hcd() {
  # Short circuit if no projects dir is set
  [ -z "$PROJECTS_DIR" ] && return builtin cd "$@"  # just a plain old cd

  local target_dir=$@
  local this_dir="$PWD"
  local this_dirname=$(basename "$PWD")
  local parent_dir=$(dirname "$PWD")
  local default_histfile="$HOME/.bash_history"

  local project_dir project_name walk_dir project_rc

  # cd to project root if called w/ no args and inside a project sub-path
  if [ -z "$@" ] && [ "$PROJECT" ] && [[ "$parent_dir" == "$PROJECTS_DIR"* ]]; then
    project_dir="${PROJECTS_DIR}/${PROJECT}"

    if [[ "$parent_dir" == "$project_dir"* ]]; then
      target_dir="$project_dir"
    fi
  fi
  
  builtin cd $target_dir  # do actual cd

  # Update locals after cd
  this_dir="$PWD"
  this_dirname=$(basename "$PWD")
  parent_dir=$(dirname "$PWD")

  # When entering a project directory, load project bash history and check
  # for a project init file
  if [[ "$parent_dir" == "$PROJECTS_DIR"* ]]; then
    if [ "$parent_dir" == "$PROJECTS_DIR" ]; then
      project_name="${this_dirname}"
    else
      project_name=${parent_dir#"$PROJECTS_DIR/"}
      project_name=${project_name%%/*}
    fi

    project_dir="${PROJECTS_DIR}/${project_name}"

    # Load project bash history
    if [ "$PROJECT" != "${project_name}" ]; then
      echo "${PURPLE}Loading ${project_name}${RESET}"

      history -a # append entries to current history file
      local hist_dir="$HOME/.projectrc/bash_history.d${project_dir}"
      mkdir -p "$hist_dir"
      export HISTFILE="${hist_dir}/bash_history" # activate project history file
      history -c # clear memory
      history -r # read from current histfile

      # Set the active project name
      export PROJECT="$project_name"
    fi

    # Walk the directory tree as far as the project root, looking for the first
    # '.projectrc' file
    walk_dir="$this_dir"
    while [[ -z "$project_rc" && "$walk_dir" == "$project_dir"* ]]; do
      # Check for a .projectrc file and then move up a directory
      if [ -e "${walk_dir}/.projectrc" ]; then
        project_rc="${walk_dir}/.projectrc"
        . "$project_rc"
      fi
      walk_dir=$(dirname "$walk_dir")
    done

  # When exiting a project directory, clean up
  elif [ ! -z "$PROJECT" ]; then
    echo "${PURPLE}Leaving $PROJECT${RESET}"

    # Load default bash history
    if [ "$HISTFILE" != "${DEFAULT_HISTFILE:-default_histfile}" ]; then
      history -a # append entries to current history file
      export HISTFILE="${DEFAULT_HISTFILE:-default_histfile}"
      history -c # clear memory
      history -r # read from active histfile
    fi

    # Clear the active project
    unset PROJECT
  fi
}

# Tab-complete project directories
function cdp() {
  hcd $PROJECTS_DIR/$1
}
# Bash completion for project directories
_cdp() {
    local cur quoted i j k
    local wdir="$PROJECTS_DIR"

    _get_comp_words_by_ref cur
    _quote_readline_by_ref "$wdir/$cur" quoted

    _compopt_o_filenames

    local -r mark_dirs=$(_rl_enabled mark-directories && echo y)
    local -r mark_symdirs=$(_rl_enabled mark-symlinked-directories && echo y)

    k="${#COMPREPLY[@]}"
    for j in $( compgen -d $quoted ); do
        if [[ ( $mark_symdirs && -h $j || $mark_dirs && ! -h $j ) && ! -d ${j#$wdir/} ]]; then
            j="${j}/"
        fi
        COMPREPLY[k++]=${j#$wdir/}
    done

    if [[ ${#COMPREPLY[@]} -eq 1 ]]; then
        i=${COMPREPLY[0]}
        if [[ "$i" == "$cur" && $i != "*/" ]]; then
            COMPREPLY[0]="${i}/"
        fi
    fi

    return 0
}
complete -F _cdp -o nospace cdp

# Create a new directory and copy skel projectrc file
function mkproject() {
  [ -e "$PROJECTS_DIR/$1" ] && return false
  mkdir -p "${PROJECTS_DIR}/$1"
  cp /usr/local/etc/projectrc/skel "${PROJECTS_DIR}/$1/.projectrc"
}

# Create and init a project
function mkp() {
  mkproject $1 && cdp "${PROJECTS_DIR}/$1"
}
