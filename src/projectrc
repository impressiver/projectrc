#!/usr/bin/env bash

#
# Usage
#

function usage() {
  echo "Usage: ${ORANGE}$0 [-c] [init|activate|deactivate|sync [<project>]]"
  echo "                 [list|config|status] [--config=<path>]${RESET}"
  echo
  echo "Examples:"
  echo "  ${ORANGE}projectrc list${RESET}                                 List available projects"
  echo "  ${ORANGE}projectrc init${RESET}                                 Create or update project from the current directory"
  echo "  ${ORANGE}projectrc init Cybertron${RESET}                       Create project named \"Cybertron\" in \$PROJECT_HOME"
  echo "  ${ORANGE}projectrc activate${RESET}                             Activate project from within project path"
  echo "  ${ORANGE}projectrc activate Cybertron${RESET}                   Jump to \"Cybertron\" project root and activate"
  echo "  ${ORANGE}projectrc sync${RESET}                                 (Re)execute closest '.projectrc' from within an active project subdirectory"
  echo "  ${ORANGE}projectrc sync git/megatron${RESET}                    (Re)execute closest '.projectrc' from '\$PROJECT_HOME/git/megatron'"
  echo "  ${ORANGE}projectrc deactivate${RESET}                           Deactivate currently active project"
  echo "  ${ORANGE}projectrc status${RESET}                               Show details about the current environment state/settings"
  echo "  ${ORANGE}projectrc config projects-home${RESET}                 Get configured base path used for creating/managing projects"
  echo "  ${ORANGE}projectrc config projects-home=\"~/Projects\"${RESET}    Set projects path to '~/Projects'"
}


#
# Env
#

DEFAULT_CONFIG="${HOME}/.projectrc/config"
DEFAULT_HISTFILE="${HISTFILE:-${HOME}/.bash_history}"

declare -A config

#
# Helpers
#

# Read config file with the expected format:
# ------------
# [global]
# prop_one=abc
# prop_two=123
#
# [section]
# prop_one=def
# prop_two=456
# ...
function read_config() {
  local config_file="${@:-$DEFAULT_CONFIG}"

  # Make sure the path exists and is a regular file
  if [ ! -e "${config_file}" ] || [ ! -f "${config_file}" ]; then
    echo "${RED}Invalid config path:${RESET} '${config_file}' is missing or not a regular file"
    return 2
  fi

  # Parse config file into dot-notated associative array
  while read line; do
    local block

    if [[ $line =~ ^"["(.+)"]"$ ]]; then
      # Matched a new block (eg '[project]')
      block=${BASH_REMATCH[1]}
    elif [[ $line =~ ^([_[:alpha:]][_[:alnum:]]*)"="(.*) ]]; then
      # Matched a new config property (eg 'property=value')
      local prop=${BASH_REMATCH[1]}
      local val="${BASH_REMATCH[2]}"
      if [ ! $block ]; then
        echo "${ORANGE}'${prop}' outside of a block declaration (eg '[global]'), skipping${RESET}"
        continue
      fi
      # Store in dot-notated keys (eg. 'config[project.name]')
      config[$"${block}.${prop}"]="$val"
    fi
  done < $config_file
}

function parse_project_name() {
  local target_dir="$@"
  local parent_dir="$(dirname "${target_dir}")"

  if [ "$parent_dir" == "$PROJECTS_HOME" ]; then
    # The project name is the current directory name
    project_name=$(basename "${target_dir}")
  else
    # Extract project name from the path
    project_name=${parent_dir#"$PROJECTS_HOME/"}
    project_name=${project_name%%/*}
  fi

  echo "$project_name"
}

# Load project bash history, or default histfile if called w/ no args
function load_histfile() {
  local histfile="${@:-$DEFAULT_HISTFILE}"
  local hist_dir="$(dirname "${histfile}")"

  history -a # append new entries to current history file before swapping
  if [ ! -d "$hist_dir" ] && [ "$@" ]; then
    mkdir -p "$hist_dir" # create project directory if needed
  fi
  export HISTFILE="${histfile}" # set new history file
  history -c # clear memory
  history -r # load project histfile
}


#
# Commands
#

function activate() {
  # Short circuit if no projects path is set
  if [ -z "$PROJECTS_HOME" ]; then
    echo "${RED}Please configure \$PROJECTS_HOME${RESET}"
    echo
    usage
    exit 1
  fi

  local this_dir="$PWD"
  local target_dir="${PROJECTS_HOME}/$@"
  local parent_dir="$(dirname "${target_dir}")"

  local active_dir parent_dir project_name project_dir

  # Currently active project path
  [ "$PROJECT" ] && active_dir="${PROJECTS_HOME}/${PROJECT}"

  # If executed w/o args...
  if [ -z "$@" ]; then
    if [ "$this_dir" == "$PROJECTS_HOME"* ]; then
      # Current directory is inside a projects path, activate that project
      target_dir="$this_dir"
    else
      # TODO: (IW) Even though activate was called from outside the project path,
      # why not walk the path and see if there's a .projectrc anyway?
      echo "Activate must be called from inside a project path, or one passed in as an argument"
      usage
      return 1
    fi
  fi

  # Resolve project name and base path
  project_name="$( parse_project_name "$target_dir" )"
  project_dir="${PROJECTS_HOME}/${project_name}"

  # Check for existing active project
  if [ "$PROJECT" ]; then
    # Don't activate if already active
    if [ "$PROJECT" == "${project_name}" ]; then
      echo "${PROJECT} already active, maybe you meant ${ORANGE}projectrc sync${RESET}?"
      exit 0
    fi

    deactivate # deactivate previous project
  fi

  # Activate project
  echo "${PURPLE}Activating ${project_name}${RESET}"

  # If called from outside the project path, jump to project root
  if [[ "$parent_dir" != "$PROJECTS_HOME"* ]]; then
    builtin cd "${project_dir}"
  fi

  # load project histfile
  load_histfile "${project_dir}/.projectrc/bash_history"

  # Export the active project name and base path
  export PROJECT="$project_name"
  export PROJECT_HOME="${project_dir}"
  # Set project home, unless it was already set
  # export PROJECT_HOME="${PROJECT_HOME:-project_dir}"

  # Run project activation hook
  if [ -f "${project_dir}/.projectrc/hooks/activate" ]; then
    . "${project_dir}/.projectrc/hooks/activate"
  fi

  # Run closest '.projectrc' script
  sync
}

# Walk up the active project path and execute the first (non-directory)
# '.projectrc' script found
function sync() {
  local this_dir="$PWD"
  local parent_dir="$(dirname "${this_dir}")"

  # Short circuit if no project is active, or outside active project path
  if [ -z "$PROJECT" ] || [[ "$parent_dir" != "$PROJECTS_HOME"* ]]; then
    return 0
  fi

  local this_dir="$PWD"
  local walk_dir="$this_dir"
  local project_rc

  # Walk up to the project root looking for a '.projectrc' file
  while [[ -z "$project_rc" && "$walk_dir" == "${PROJECT_HOME}"* ]]; do
    # Check for a .projectrc file and then move up a directory
    if [ -e "${walk_dir}/.projectrc" ]; then
      project_rc="${walk_dir}/.projectrc"
    fi
    walk_dir=$(dirname "$walk_dir")
  done

  # Run sub-project script, if one was found
  if [ -f "$project_rc" ]; then
    . "$project_rc"
  fi
}

function deactivate() {
  # Short circuit if there is no active project
  if [ -z "$PROJECT" ]; then
    echo "${RED}Nothing to deactivate${RESET}"
    echo
    usage # print help menu
    exit 1
  fi

  echo "${PURPLE}Deactivating ${PROJECT}${RESET}"

  # Run project deactivation hook
  if [ -f "${PROJECT_HOME}/.projectrc/hooks/deactivate" ]; then
    . "${PROJECT_HOME}/.projectrc/hooks/deactivate"
  fi

  # Load the default histfile
  load_histfile

  # Clear the active project name
  unset PROJECT
  unset PROJECT_HOME
}


#
# Parse option flags
#

if [ $# -eq 0 ]; then
  usage
  exit 2
fi

CMD_ARGS=()

# Declare num args expected w/ long options (default: none)
declare -A longoptspec
longoptspec=( [config]=1 )

# Options followed by ":" require a value to be passed in (eg. `-a 123`)
# The leading ":" suppresses error messages
optspec=":c:-:h"

while [ $# -gt 0 ]; do
  echo "args: $@"
  while [[ "$1" != $'-'* ]]; do
    CMD_ARGS+=("$1")
    shift
  done

  while getopts $optspec opt; do
    while true; do
      case $opt in
        -)  # parse long opts (eg `--config=/path/to/config`)
          if [[ "${OPTARG}" =~ .*=.* ]]; then  # '--key=value' is always one argument
            opt=${OPTARG/=*/}
            OPTARG=${OPTARG#*=}
            ((OPTIND--))
          else # '--key value1 value2' allows for multiple arguments
            opt="$OPTARG"
            OPTARG=(${@:OPTIND:$((longoptspec[$opt]))})
          fi
          ((OPTIND+=longoptspec[$opt]))

          # now that opt/OPTARG are set, re-process opts as if getopts understood
          # long options
          continue
          ;;
        c|config)
          OPT_CONFIG="$OPTARG"
          shift $((OPTIND-1))
          ;;
        h)  # show help
          usage
          exit 0
          ;;
        \?) #unrecognized option - show help
          echo -e \\n"${RED}Unrecognized option '-$OPTARG'${RESET}"
          usage
          exit 2
          ;;
      esac
      break;
    done
    # shift $((OPTIND-1))  #This tells getopts to move on to the next argument.
  done
done


#
# Parse command args
#

# Read global config
read_config "${OPT_CONFIG:-$DEFAULT_CONFIG}"
# Read active project config
[ "$PROJECT" ] && read_config "${PROJECT_HOME}/.projectrc/config"

# The command is the first item, the rest are sent as command args
cmd=("${CMD_ARGS[@]:1}")

case "$cmd" in
  init|activate|deactivate)
    $cmd "${CMD_ARGS}"
    exit 0
    ;;
  config)
    $cmd "${CMD_ARGS}"
    exit 0
    ;;
  list|status)
    $cmd
    exit 0
    ;;
  help)  #show help
    usage
    exit 0
    ;;
  \?) #unrecognized option - show help
    echo -e \\n"${RED}Unrecognized command '$ARG_CMD'${RESET}"
    usage
    exit 2
    ;;
  *)
    usage
    exit 1
esac
